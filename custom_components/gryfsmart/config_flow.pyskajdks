"""Handle the configuration flow for the GryfSmart integration."""

import logging
import uuid
from types import MappingProxyType
from typing import Any, Required

from pygryfsmart import GryfApi

from serial import SerialException
import voluptuous as vol

from homeassistant import config_entries
from homeassistant.core import callback
from homeassistant.helpers import selector

from .const import (
    BINARY_SENSOR_DEVICE_CLASS,
    CONF_COMMUNICATION,
    CONF_DEVICES,
    CONF_ID,
    CONF_MODULE_COUNT,
    CONF_NAME,
    CONF_PORT,
    CONF_TYPE,
    CONFIG_FLOW_MENU_OPTIONS,
    DEFAULT_PORT,
    DEVICE_TYPES,
    DOMAIN,
    PLATFORM_BINARY_SENSOR,
    PLATFORM_SWITCH,
    SWITCH_DEVICE_CLASS,
)

_LOGGER = logging.getLogger(__name__)

class GryfSmartConfigFlow(config_entries.ConfigFlow):
    """Gryf Smart ConfigFlow."""

    VERSION = 1.1
    CONNECTION_CLASS = config_entries.CONN_CLASS_LOCAL_PUSH
    DOMAIN = DOMAIN

    _config_data: dict[str, Any] = {}

    def __init__(self) -> None:
        """Initialise Gryf Smart ConfigFlow."""
        super().__init__()

        self._config_data[CONF_DEVICES] = []

    # async def async_step_user(
    #         self,
    #         user_input: dict[str, Any] | None=None
    #     ) -> config_entries.ConfigFlowResult:
    #
    #         return await self.async_step_user()

    async def async_step_user(
        self,
        user_input: dict[str, Any] | None=None
    ) -> config_entries.ConfigFlowResult:
        
        errors = {}

        if user_input:
            # test czy polaczenie sie udalo

            self._conifg_data = {
                CONF_COMMUNICATION: {},
                CONF_DEVICES: [],
            }

        return self.async_show_form(
            step_id="communication",
            data_schema=vol.Schema(
                {

                    vol.Required(CONF_PORT, default=DEFAULT_PORT): str,
                    vol.Required(CONF_MODULE_COUNT, default=1): int,
                }
            ),
            errors=errors,
        )
